import greenfoot.*; // (World, Actor, GreenfootImage, Greenfoot and MouseInfo)

import java.util.List;

/**
 * A 'Body' is any kind of object in space that has a mass. It could be a star, or a planet, 
 * or anything else that floats around in space.
 * 
 * @author Michael Kšlling 
 *   (Including improvements by J. Buhl.)
 * @version 1.2
 */

public class Particle extends SmoothMover
{
    private static final double GRAVITY_C = 5.0;
    private static final double ELECTROMAGIC_C = 50000.0;
    private static final double NUCLEAR_FARCE_C = 1.0;
    
    private static final Color defaultColor = new Color(255, 216, 0);
    private double mass;
    private double charge;
    
    /**
     * Construct a Body with default size, mass, velocity and color.
     */
    public Particle()
    {
        this (20, 300, 0.0, new Vector(0, 0.0), defaultColor);
    }
    
    /**
     * Construct a Body with a specified size, mass, velocity and color.
     */
    public Particle(int size, double mass, double charge, Vector velocity, Color color)
    {
        this.mass = mass;
        this.charge = charge;
        addToVelocity(velocity);
        GreenfootImage image = new GreenfootImage (size, size);
        image.setColor(color);
        image.fillOval(0, 0, size-1, size-1);
        image.setColor(Color.BLACK);
        image.fillOval( (int) (size * 0.75), (int) ( 0.15 * size), (int)(size * .2),(int)(size * .2));
        image.fillOval( (int) (size * 0.75), (int) ( 0.65 * size), (int)(size * .2),(int)(size * .2));
        setImage (image);
    }
    
    /**
     * Act. That is: apply  the gravitation forces from
     * all other bodies around, and then move.
     */
    public void act() 
    {
        turn();
        move();
        boundSpeed();
        bounceAtEdge();
    }
    
    private void boundSpeed(){
        
        if (getSpeed() > 50)
        {
            accelerate (0.6);
        }
        else if (getSpeed() > 20)
        {
            accelerate (0.75);
        }
        else if (getSpeed() > 7) 
        {
            accelerate (0.9);  // acceleration with factor < 1 is actually slowing down.
        }
    }
    
    /**
     * Check whether we have hit the edge of the universe. If so, bounce off it.
     */
    private void bounceAtEdge()
    {
        if (getX() == 0 || getX() == getWorld().getWidth()-1) {
            setLocation((double)getX(), (double)getY());
            invertHorizontalVelocity();
            //accelerate(0.9);
        }
        else if (getY() == 0 || getY() == getWorld().getHeight()-1) {
            setLocation((double)getX(), (double)getY());
            invertVerticalVelocity();
            //accelerate(0.9);
        }
    }
    
    
    /**
     * Apply the force of gravity of a given body to this one.
     * (Force is applied for one time unit; dt==1.)
     */
    public void applyGravity(Particle other)
    {
        double dx = other.getExactX() - this.getExactX();
        double dy = other.getExactY() - this.getExactY();
        Vector dv = new Vector (dx, dy); //sets direction correctly; length still invalid
        double distance = Math.sqrt (dx*dx + dy*dy);
        double force = GRAVITY_C * this.mass * other.mass / (distance * distance);
        double acceleration = force / this.mass;
        dv.setLength (acceleration);
        addToVelocity (dv);
    }
    
    protected void applyElectroMagic(Particle other)
    {
        double dx = other.getExactX() - this.getExactX();
        double dy = other.getExactY() - this.getExactY();
        Vector dv = new Vector (dx, dy); //sets direction correctly; length still invalid
        double distance = Math.sqrt (dx*dx + dy*dy);
        double force = - ELECTROMAGIC_C * this.charge * other.charge / (distance * distance);
        //double vector_dot_prod = this.getSpeed() * other.getSpeed() * Math.cos(this.getDirection() - other.getDirection());
        //force *= vector_dot_prod;
        double acceleration = force / this.mass;
        dv.setLength (acceleration);
        addToVelocity (dv);
    }
    
    protected void applyNuclearFarce(Particle other)
    {
        double dx = other.getExactX() - this.getExactX();
        double dy = other.getExactY() - this.getExactY();
        Vector dv = new Vector (dx, dy); //sets direction correctly; length still invalid
        double distance = Math.sqrt(dx*dx + dy*dy);
        double force = NUCLEAR_FARCE_C * distance ;
        double acceleration = force / this.mass;
        dv.setLength (acceleration);
        addToVelocity (dv);
    }
    
    /**
     * Return the mass of this body.
     */
    public double getMass()
    {
        return mass;
    }
    
    /**
     * Return the charge of this body.
     */
    public double getCharge()
    {
        return charge;
    }
    
    
}
